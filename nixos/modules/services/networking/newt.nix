{
  config,
  lib,
  pkgs,
  ...
}:
let
  cfg = config.services.newt;
in
{
  options = {
    services.newt = {
      enable = lib.mkEnableOption "Newt";

      id = lib.mkOption {
        type = lib.types.str;
        default = null;
        description = ''
          Newt ID generated by Pangolin to identify the client, shown on site creation in the dashboard.
        '';
      };
      endpoint = lib.mkOption {
        type = lib.types.str;
        default = null;
        description = ''
          The endpoint where both Gerbil and Pangolin reside in order to connect to the websocket. The url of your Pangolin dashboard.
        '';
      };
      # provide path to file to keep secrets out of the nix store
      secretFile = lib.mkOption {
        type = lib.types.nullOr lib.types.path;
        default = null;
        description = ''
          Path to the file containing a unique secret (not shared and kept private), used to authenticate the client ID with the websocket in order to receive commands. Specified by Pangolin on site creation.
        '';
      };
      logLevel = lib.mkOption {
        type = lib.types.enum [
          "DEBUG"
          "INFO"
          "WARN"
          "ERROR"
          "FATAL"
        ];
        default = "INFO";
        description = "The log level to use.";
      };
    };
  };

  config = lib.mkIf cfg.enable {
    assertions = map (opt: {
      assertion = cfg.${opt} != null;
      message = "services.newt.${opt} must be provided when Newt is enabled.";
    }) (builtins.attrNames cfg);
    systemd.services.newt = {
      description = "Newt, a user space tunnel client to securely expose private resources for Pangolin";
      wantedBy = [ "multi-user.target" ];
      after = [ "network.target" ];
      script = ''
        NEWT_SECRET=$(cat "$CREDENTIALS_DIRECTORY/NEWT_SECRET_FILE")
        exec ${lib.getExe pkgs.newt-go} \
        --id ${cfg.id} \
        --secret "$NEWT_SECRET" \
        --endpoint ${cfg.endpoint} \
        --log-level ${cfg.logLevel}
      '';
      serviceConfig = {
        DynamicUser = true;
        User = "newt";
        Group = "newt";
        StateDirectory = "newt";
        WorkingDirectory = "%S/newt";
        Restart = "always";
        RestartSec = "10s";
        LoadCredential = "NEWT_SECRET_FILE:${cfg.secretFile}";
      };
    };
  };

  meta.maintainers = with lib.maintainers; [ jackr ];
}
